//CPE 301 Final Project 
//Jonathan Taasan, Tara Hartman, Rachel Lykins, Alex Hsueh
//05/09/2023

//includes (put libraries in here)
#include <Stepper.h>

#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <LiquidCrystal.h>

#include "RTClib.h"

#define DHTPIN 25          // Digital pin connected to the DHT sensor 
#define DHTTYPE DHT11     // DHT 11

#define RDA 0x80
#define TBE 0x20

RTC_DS1307 rtc;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal lcd(12, 11, 9, 2, 3, 4, 5); //NEED TO CHANGE THE PIN OUT !!!!!!!!!!!

volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;

volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned int* my_ADC_DATA = (unsigned int*) 0x78;

volatile unsigned char* port_d = (unsigned char*) 0x102; 
volatile unsigned char* ddr_d  = (unsigned char*) 0x101; 
volatile unsigned char* pin_d  = (unsigned char*) 0x100;

// pin 28
  volatile unsigned char* port_a = (unsigned char*) 0x22;
  volatile unsigned char* ddr_a = (unsigned char*) 0x21;
  volatile unsigned char* pin_a  = (unsigned char*) 0x20;

// // pin 30
  volatile unsigned char* port_c = (unsigned char*) 0x28  ;
  volatile unsigned char* ddr_c  = (unsigned char*) 0x27 ;
  volatile unsigned char* pin_c = (unsigned char*) 0x26  ;


// // pin 38
  volatile unsigned char* port_b = (unsigned char*)   0x25;
  volatile unsigned char* ddr_b = (unsigned char*)  0x24;
  volatile unsigned char* pin_b = (unsigned char*)   0x23;


// //pin 39
  volatile unsigned char* port_g = (unsigned char*) 0x34;
  volatile unsigned char* ddr_g = (unsigned char*) 0x33;
  volatile unsigned char* pin_g  = (unsigned char*) 0x32;

// pin A10
  volatile unsigned char* port_k = (unsigned char*) 0x108;
  volatile unsigned char* ddr_k = (unsigned char*) 0x107;
  volatile unsigned char* pin_k  = (unsigned char*) 0x106;

// fan motor stuff
  volatile unsigned char* port_l = (unsigned char*) 0x10B; 
  volatile unsigned char* ddr_l  = (unsigned char*) 0x10A; 
  volatile unsigned char* pin_l  = (unsigned char*) 0x109;

//temperature variable
int templevel = 0;

//water variables
unsigned int waterlevel;

//Vent Stepper Motor Variables
const int StepsPerRev = 100; 
Stepper myMotor(StepsPerRev, 43, 45, 47, 49);
int Pval = 0;
int potenVal = 0;
int sysState = 5;

void setup (){
  U0init(9600);


  *ddr_a |= 0b01000000;
  *ddr_c |= 0b10000000;
  *ddr_b |= 0b00001000;
  *ddr_g |= 0b00000100;
  
  //vent speed
  myMotor.setSpeed(200);
  
  //fan motor
  *ddr_l |= 0b010101000;
  
  //DHT sensor
  dht.begin();
  
  //LCD
  lcd.begin(16,2);

  //Real Time Clock Module
  rtc.begin();
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

  lcd.clear();

  //pk2 to input for pull up resistor button
  *ddr_k &= 0xEF;
  *port_k |= 0b00000100;

  adc_init();
  *ddr_b |= 0x80; //set pin 13 to output
}

void loop (){
  delay(5000);
  
  if(*pin_k & 0b00000100){
    if(sysState != 0){
    U0puts("Disabled - ");                          //RTC timestamps disabled
    telltime();
    sysState = 0;
    }
    lcd.clear();
    *port_l &= (0b000000000); //turn off fan

    *port_b |= (0b00001000); //yellow LED on

    *port_a &= (0b10111111); //green LED off
    *port_c &= (0b01111111); //red LED off
    *port_g &= (0b11111011); //blue LED off
  }
  else{
    //Do these Anyways
    unsigned int waterlevel = adc_read(0);        //Water Level Monitoring 
    templevel = dhtfunction();        //Humidity and Temperature Displayed
    Vent_control();                 //Change Vent Position if Needed

    if(waterlevel < 600){
      if(sysState != 1){
      U0puts("Error - ");                               //RTC timestamps error state
      telltime();
      sysState = 1;
      }
      LCDerror(); //display error
      *port_l &= (0b000000000);       //turn off fan

      *port_c |= (0b10000000); //red LED on

      *port_a &= (0b10111111); //green LED off
      *port_b &= (0b11110111); //yellow LED off
      *port_g &= (0b11111011); //blue LED off

    }
    else{
      if(templevel == 1){
        if(sysState != 2){
          U0puts("Running - ");                                //RTC timestamps running
          telltime();
          sysState = 2;
      }
      *port_g |= (0b00000100); //blue LED on

      *port_a &= (0b10111111);
      *port_c &= (0b01111111);
      *port_b &= (0b11110111);

      }
      else{
      if(sysState != 3){
        U0puts("Idle - ");                                //RTC timestamps idle
        telltime();
        sysState = 3;
      }
      *port_a |= (0b01000000); //green LED on

      *port_c &= (0b01111111);
      *port_b &= (0b11110111);
      *port_g &= (0b11111011);
      }
    }
  }
}

  int dhtfunction(){
    lcd.clear();
    float temp_c = dht.readTemperature();
    float humidity = dht.readHumidity();
    LCDdisplay(temp_c,humidity);
    if(temp_c > 22){
      //turn on fan
      *port_l |= 0b000101000;
      return(1);
    }
    else{
      *port_l &= 0b000000000;     //turn off fan
      return(0);
    }
  }

  void LCDdisplay(int temp, int hum){
    lcd.clear();
    lcd.setCursor(0,0);

    lcd.print("Temp:");
    lcd.print(temp);
    lcd.print(char(223));
    lcd.print("C");

    lcd.setCursor(0,1);

    lcd.print("Hum:");
    lcd.print(hum);
    lcd.write("%");
  }

  void LCDerror(){
    lcd.setCursor(11,0);
    lcd.print("WL:");
    lcd.setCursor(11,1);
    lcd.print("ERROR:");
  }

void telltime(){
  DateTime now = rtc.now();

    print_int(now.year());
    U0puts("/");
    print_int(now.month());
    U0puts("/");
    print_int(now.day());
    U0puts(" Time: ");
    if(now.hour() < 10){
      U0puts("0");
      print_int(now.hour());
    }
    else{
      print_int(now.hour());
    }
    if(now.minute() < 10){
      U0puts(":");
      U0puts("0");
      print_int(now.minute());
    }
    else{
      U0puts(":");
      print_int(now.minute());
    }
    if(now.second() < 10){
      U0puts(":");
      U0puts("0");
      print_int(now.second());
    }
    else{
      U0puts(":");
      print_int(now.second());
    }
  U0puts("\n");
}

//controls vent stepper motor
void Vent_control(){
  potenVal = map(analogRead(A8),0,1023,0,500);
//turns vent based on potentiometer
  if(potenVal>Pval)
      myMotor.step(5);
  if(potenVal<Pval)
      myMotor.step(-5);
  Pval = potenVal;
} 

void U0init(unsigned int U0baud){
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}

void adc_init()
{
  // setup the A register
  *my_ADCSRA |= 0b10000000; // set bit   7 to 1 to enable the ADC
  *my_ADCSRA &= 0b11011111; // clear bit 6 to 0 to disable the ADC trigger mode
  *my_ADCSRA &= 0b11110111; // clear bit 5 to 0 to disable the ADC interrupt
  *my_ADCSRA &= 0b11111000; // clear bit 0-2 to 0 to set prescaler selection to slow reading
  // setup the B register
  *my_ADCSRB &= 0b11110111; // clear bit 3 to 0 to reset the channel and gain bits
  *my_ADCSRB &= 0b11111000; // clear bit 2-0 to 0 to set free running mode
  // setup the MUX Register
  *my_ADMUX  &= 0b01111111; // clear bit 7 to 0 for AVCC analog reference
  *my_ADMUX  |= 0b01000000; // set bit   6 to 1 for AVCC analog reference
  *my_ADMUX  &= 0b11011111; // clear bit 5 to 0 for right adjust result
  *my_ADMUX  &= 0b11100000; // clear bit 4-0 to 0 to reset the channel and gain bits
}

unsigned int adc_read(unsigned char adc_channel_num)
{
  // clear the channel selection bits (MUX 4:0)
  *my_ADMUX  &= 0b11100000;
  // clear the channel selection bits (MUX 5)
  *my_ADCSRB &= 0b11110111;
  // set the channel number
  if(adc_channel_num > 7)
  {
    // set the channel selection bits, but remove the most significant bit (bit 3)
    adc_channel_num -= 8;
    // set MUX bit 5
    *my_ADCSRB |= 0b00001000;
  }
  // set the channel selection bits
  *my_ADMUX  += adc_channel_num;
  // set bit 6 of ADCSRA to 1 to start a conversion
  *my_ADCSRA |= 0x40;
  // wait for the conversion to complete
  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register
  return *my_ADC_DATA;
}

unsigned char U0kbhit(){
  return (RDA & *myUCSR0A);
}

unsigned char U0getchar(){
  return *myUDR0;
}

void U0putchar(unsigned char U0pdata){
  while(!(TBE & *myUCSR0A));
  *myUDR0= U0pdata;
}

void U0puts(char *sentence) {
  while (*sentence) {  // loop until the null terminator is found
    U0putchar(*sentence++);
  }
}

void print_int(unsigned int out_num)
{
  // clear a flag (for printing 0's in the middle of numbers)
  unsigned char print_flag = 0;
  // if its greater than 1000
  if(out_num >= 1000)
  {
    // get the 1000's digit, add to '0' 
    U0putchar(out_num / 1000 + '0');
    // set the print flag
    print_flag = 1;
    // mod the out num by 1000
    out_num = out_num % 1000;
  }
  // if its greater than 100 or we've already printed the 1000's
  if(out_num >= 100 || print_flag)
  {
    // get the 100's digit, add to '0'
    U0putchar(out_num / 100 + '0');
    // set the print flag
    print_flag = 1;
    // mod the output num by 100
    out_num = out_num % 100;
  } 
  // if its greater than 10, or we've already printed the 10's
  if(out_num >= 10 || print_flag)
  {
    U0putchar(out_num / 10 + '0');
    print_flag = 1;
    out_num = out_num % 10;
  } 
  // always print the last digit (in case it's 0)
  U0putchar(out_num + '0');
}
